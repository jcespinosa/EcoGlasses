#! /usr/bin/python                                                                                                                            
# -*- coding: utf-8 -*- 

import cv2, numpy

#
#descriptor_algorithm = 'HARRIS'
#feature_algorithm = 'BRIEF'
descriptor_algorithm = 'SURF'
feature_algorithm = 'SURF'
matcher_algorithm = 'FlannBased'

#
feature_detector = cv2.FeatureDetector_create (feature_algorithm)
feature_descriptor = cv2.DescriptorExtractor_create (descriptor_algorithm)
descriptor_matcher = cv2.DescriptorMatcher.create (matcher_algorithm)

def get_features(img):
    return feature_detector.detect(img)

def get_descriptor(img, features):
    return feature_descriptor.compute(img, features)[1]


list_reference_images = (
    '/home/max/Pictures/opencv/carnes_finas_san_juan_res.jpg',
    '/home/max/Pictures/opencv/carnes_finas_san_juan.jpg',
    '/home/max/Pictures/opencv/chocokrispis.png',
    '/home/max/Pictures/opencv/maxkalavera.jpg'
    )

global_list_reference_descriptor = None
get_reference_descriptors()

def get_reference_descriptors():
    global global_list_reference_descriptor
    list_reference_descriptors = list()
    for img_path in list_images_reference:
        image = cv2.imread(img_path , cv2.CV_LOAD_IMAGE_COLOR)
        image = cv2.resize(
            image, calculate_resize(
                (int(image.shape[1]), int(image.shape[0])),
                (128, 128)
                ) 
            )

        temp_features = get_features(image)
        temp_descriptor = get_descriptor(image, temp_features)
        list_reference_descriptors.append(temp_descriptor)

    global_list_reference_descriptor = list_reference_descriptors

def verify_descriptor(descriptor, list_reference_descriptors):
    global global_list_reference_descriptor
    list_reference_descriptors = global_list_reference_descriptor

    matches = descriptor_matcher.match(reference_descriptor, descriptor, k=2)

def main():
    pass

if __name__ == '__main__':
    main()
