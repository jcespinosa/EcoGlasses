#! /usr/bin/python                                                                                                                            
# -*- coding: utf-8 -*- 

#
#descriptor_algorithm = 'HARRIS'
#feature_algorithm = 'BRIEF'
descriptor_algorithm = 'SURF'
feature_algorithm = 'SURF'
matcher_algorithm = 'FlannBased'

#
feature_detector = cv2.FeatureDetector_create (feature_algorithm)
feature_descriptor = cv2.DescriptorExtractor_create (descriptor_algorithm)
descriptor_matcher = cv2.DescriptorMatcher.create (matcher_algorithm)

def get_features(img):
    return feature_detector.detect(img)

def get_descriptor(img, features):
    return feature_descriptor.compute(img, features)[1]


list_images_reference = ()
def get_reference_descriptors():
    list_reference_descriptors = list()
    for img_path in list_images_reference:

        image = cv2.imread(img_path , cv2.CV_LOAD_IMAGE_COLOR)
        image = cv2.resize(image, calculate_resize((image.shape[1], image.shape[0]) ,(128, 128)) )

        temp_features = get_features(image)
        temp_descriptor = get_descriptor(image, temp_features)
        list_reference_descriptors.append(temp_descriptor)

    return list_reference_descriptors

def verify_descriptor(descriptor, list_reference_descriptors = get_reference_descriptors()):
    matches = descriptor_matcher.match(reference_descriptor, descriptor, k=2)
